//
//  ResultsView.swift
//  ActionFlow
//
//  Created by Gideon Anyalewechi on 17/06/2025.
//

import SwiftUI

struct ResultsView: View {
    @ObservedObject var meetingSession: MeetingSession
    @Binding var appState: AppState
    @State private var showingShareSheet = false
    
    var body: some View {
        VStack(alignment: .leading, spacing: 20) {
            // Header
            HStack {
                VStack(alignment: .leading) {
                    Text("Action Items")
                        .font(.largeTitle)
                        .fontWeight(.bold)
                    
                    Text("\(meetingSession.actionItems.count) items found")
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                }
                
                Spacer()
                
                Button("Share") {
                    showingShareSheet = true
                }
                .buttonStyle(.borderedProminent)
                .disabled(meetingSession.actionItems.isEmpty)
            }
            
            // Meeting info
            if !meetingSession.transcript.isEmpty {
                VStack(alignment: .leading, spacing: 8) {
                    Text("Meeting Summary")
                        .font(.headline)
                        .fontWeight(.semibold)
                    
                    HStack {
                        Label("Duration: \(formatDuration(meetingSession.duration))", systemImage: "clock")
                        Spacer()
                        Label("Date: \(formatDate(meetingSession.date))", systemImage: "calendar")
                    }
                    .font(.caption)
                    .foregroundColor(.secondary)
                }
                .padding()
                .background(Color(.systemGray6))
                .cornerRadius(12)
            }
            
            // Action items list
            if meetingSession.actionItems.isEmpty {
                // Empty state
                VStack(spacing: 16) {
                    Image(systemName: "doc.text")
                        .font(.system(size: 60))
                        .foregroundColor(.secondary)
                    
                    Text("No action items found")
                        .font(.title3)
                        .fontWeight(.medium)
                    
                    Text("Try recording a meeting with clear tasks and assignees")
                        .font(.body)
                        .foregroundColor(.secondary)
                        .multilineTextAlignment(.center)
                }
                .frame(maxWidth: .infinity, maxHeight: .infinity)
            } else {
                ScrollView {
                    LazyVStack(spacing: 12) {
                        ForEach(meetingSession.actionItems) { item in
                            ActionItemCard(item: item)
                        }
                    }
                    .padding(.vertical)
                }
            }
            
            // Bottom actions
            HStack {
                Button("Record New Meeting") {
                    startNewMeeting()
                }
                .buttonStyle(.bordered)
                .frame(maxWidth: .infinity)
                
                if !meetingSession.actionItems.isEmpty {
                    Button("View Transcript") {
                        // Could expand to show full transcript
                        print("Show transcript: \(meetingSession.transcript)")
                    }
                    .buttonStyle(.bordered)
                    .frame(maxWidth: .infinity)
                }
            }
        }
        .padding()
        .sheet(isPresented: $showingShareSheet) {
            ShareSheet(items: [generateShareText()])
        }
    }
    
    private func generateShareText() -> String {
        var shareText = "ðŸ“‹ Meeting Action Items - \(formatDate(meetingSession.date))\n\n"
        
        if meetingSession.actionItems.isEmpty {
            shareText += "No action items found in this meeting."
        } else {
            for (index, item) in meetingSession.actionItems.enumerated() {
                shareText += "\(index + 1). \(item.task)\n"
                shareText += "   ðŸ‘¤ Assignee: \(item.assignee)\n"
                shareText += "   ðŸ“… Deadline: \(item.deadline)\n\n"
            }
        }
        
        shareText += "ðŸ“± Generated by ActionFlow"
        return shareText
    }
    
    private func startNewMeeting() {
        meetingSession.actionItems.removeAll()
        meetingSession.transcript = ""
        meetingSession.duration = 0
        appState = .ready
    }
    
    private func formatDuration(_ duration: TimeInterval) -> String {
        let minutes = Int(duration) / 60
        let seconds = Int(duration) % 60
        return String(format: "%dm %ds", minutes, seconds)
    }
    
    private func formatDate(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateStyle = .medium
        formatter.timeStyle = .short
        return formatter.string(from: date)
    }
}

struct ActionItemCard: View {
    let item: ActionItem
    
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text(item.task)
                .font(.body)
                .fontWeight(.medium)
                .fixedSize(horizontal: false, vertical: true)
            
            HStack {
                Label(item.assignee, systemImage: "person.circle")
                    .font(.caption)
                    .foregroundColor(item.assignee == "unassigned" ? .orange : .blue)
                
                Spacer()
                
                Label(item.deadline, systemImage: "calendar")
                    .font(.caption)
                    .foregroundColor(item.deadline == "no deadline" ? .secondary : .green)
            }
        }
        .padding()
        .background(Color(.systemGray6))
        .cornerRadius(12)
        .overlay(
            RoundedRectangle(cornerRadius: 12)
                .stroke(Color(.systemGray4), lineWidth: 0.5)
        )
    }
}

struct ShareSheet: UIViewControllerRepresentable {
    let items: [Any]
    
    func makeUIViewController(context: Context) -> UIActivityViewController {
        let controller = UIActivityViewController(activityItems: items, applicationActivities: nil)
        return controller
    }
    
    func updateUIViewController(_ uiViewController: UIActivityViewController, context: Context) {}
}

#Preview {
    let session = MeetingSession()
    session.actionItems = [
        ActionItem(task: "Send client proposal with updated pricing", assignee: "John", deadline: "Friday"),
        ActionItem(task: "Review Q4 budget and expense reports", assignee: "Sarah", deadline: "Next Tuesday"),
        ActionItem(task: "Update project documentation", assignee: "unassigned", deadline: "no deadline")
    ]
    session.transcript = "This is a sample meeting transcript..."
    session.duration = 300 // 5 minutes
    
    return ResultsView(
        meetingSession: session,
        appState: .constant(.results)
    )
}
